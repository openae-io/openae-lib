from typing import Annotated

from numpy.typing import ArrayLike


class Input:
    def __init__(self, samplerate: float, timedata: Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')], spectrum: Annotated[ArrayLike, dict(dtype='complex64', shape=(None), order='C')]) -> None: ...

    @property
    def samplerate(self) -> float: ...

    @samplerate.setter
    def samplerate(self, arg: float, /) -> None: ...

    @property
    def timedata(self) -> Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')]: ...

    @timedata.setter
    def timedata(self, arg: Annotated[ArrayLike, dict(dtype='float32', shape=(None), order='C')], /) -> None: ...

    @property
    def spectrum(self) -> Annotated[ArrayLike, dict(dtype='complex64', shape=(None), order='C')]: ...

    @spectrum.setter
    def spectrum(self, arg: Annotated[ArrayLike, dict(dtype='complex64', shape=(None), order='C')], /) -> None: ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

def clearance_factor(input: Input) -> float: ...

def crest_factor(input: Input) -> float: ...

def energy(input: Input) -> float: ...

def impulse_factor(input: Input) -> float: ...

def kurtosis(input: Input) -> float: ...

def partial_power(input: Input, fmin: float, fmax: float) -> float: ...

def peak_amplitude(input: Input) -> float: ...

def rms(input: Input) -> float: ...

def shape_factor(input: Input) -> float: ...

def skewness(input: Input) -> float: ...

def spectral_centroid(input: Input) -> float: ...

def spectral_entropy(input: Input) -> float: ...

def spectral_flatness(input: Input) -> float: ...

def spectral_kurtosis(input: Input) -> float: ...

def spectral_peak_frequency(input: Input) -> float: ...

def spectral_rolloff(input: Input, rolloff: float) -> float: ...

def spectral_skewness(input: Input) -> float: ...

def spectral_variance(input: Input) -> float: ...

def zero_crossing_rate(input: Input) -> float: ...
